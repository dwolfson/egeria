# Apache Atlas Demo

###
# group: Configure atlas-exchange server
# @name Set default audit log destination for atlas-exchange
# Set up the server so that it is using the default audit log setting which is to output to the console only.
POST {{baseURL}}/open-metadata/admin-services/users/{{user}}/servers/atlas-exchange/audit-log-destinations/default

###
# group: Configure atlas-exchange server
# @name Configure the Catalog Integrator OMIS
# Add details of the metadata server to call and the connectors to run.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/atlas-exchange/integration-services/catalog-integrator
Content-Type: application/json

{
    "class": "IntegrationServiceRequestBody",
    "omagserverPlatformRootURL": "{{baseURL}}",
    "omagserverName": "metadata-store",
    "integrationConnectorConfigs": [
        {
            "class": "IntegrationConnectorConfig",
            "connectorName": "AtlasIntegrator",
            "connectorUserId": "generalnpa",
            "connection": {
                "class": "Connection",
                "connectorType": {
                    "class": "ConnectorType",
                    "connectorProviderClassName": "org.odpi.openmetadata.adapters.connectors.integration.apacheatlas.ApacheAtlasIntegrationProvider"
                },
                "endpoint": {
                    "class": "Endpoint",
                    "address": "http://wolfsonnet.me:21000"
                },
                "userId" : "admin",
                "clearPassword" : "admin"
            },
            "metadataSourceQualifiedName": "ApacheAtlasDL01",
            "refreshTimeInterval": "30",
            "usesBlockingCalls": "false",
            "permittedSynchronization": "BOTH_DIRECTIONS"
        }
    ]
}

###
# group: Configure atlas-exchange server
# @name Get atlas-exchange's configuration document
# Retrieve the configuration document for the named server.
GET {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/atlas-exchange/configuration

###
# group: Configure metadata-store / Add to cohort
# @name Set local server URL root
# Update the URL root that other servers that are also members any open metadata repository cohort that the server belongs to should use to make calls to this local server. This value is sent when the server registers with the cohort.  If the server is not going to join a cohort then this value is not needed.
# This value should be set to the URL of the OMAG Server Platform where the server will run.  If the server is deployed to many servers in an HA cluster configuration, it should be set to a DNS name that will disperse requests across the server cluster.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/metadata-store/server-url-root-for-caller
Content-Type: application/json

{
    "class": "URLRequestBody",
    "urlRoot": "{{baseURL}}"
}

###
# group: Configure metadata-store / Add to cohort
# @name Add cohort configuration
# Request registration to an Open Metadata Repository Cohort.  Make sure you have set up the event bus configuration defaults before making this request.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/metadata-store/cohorts/{{cohort}}

###
# group: Configure metadata-store
# @name Set up event bus
# Set up the common properties needed to call your event bus.  These properties are passed in the request body.
# This request just sets up the defaults that will be incorporated into any future configuration that includes an event bus topic.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/metadata-store/event-bus
Content-Type: application/json

{
    "producer": {
        "bootstrap.servers": "{{kafkaep}}"
    },
    "consumer":{
        "bootstrap.servers": "{{kafkaep}}"
    }
}

###
# group: Configure metadata-store
# @name Enable the in-memory repository
# Set up the local reposiotry to use the in-memory implementation.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/metadata-store/local-repository/mode/in-memory-repository

###
# group: Configure metadata-store
# @name Enable the Asset Manager OMAS
# Turn on a specific registered Open Metadata Access Services (OMAS).
# Change the value of the {{access-service}} variable in the environment to be the URL version of the name.  Typically this is done by taking the access service name, dropping "OMAS", change to lower-case and link two words with a dash "-".  For example, Asset Owner OMAS, would have a url name of asset-owner.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/metadata-store/access-services/asset-manager

###
# group: Configure metadata-store
# @name Get metadata-store's configuration document
# Retrieve the configuration document for the named server.
GET {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/metadata-store/configuration

###
# @name Start metadata-store server - using stored configuration
# Activate a server on the OMAG Server Platform.  Use the configuration document found in the configuration document store.
POST {{baseURL}}/open-metadata/platform-services/users/{{adminUserId}}/server-platform/servers/metadata-store/instance

###
# @name Start atlas-exchange server - using stored configuration
# Activate a server on the OMAG Server Platform.  Use the configuration document found in the configuration document store.
POST {{baseURL}}/open-metadata/platform-services/users/{{adminUserId}}/server-platform/servers/atlas-exchange/instance

###
# @name Get atlas-exchange status
# Retrieves the status of the connectors running in the Integration Daemon
GET {{baseURL}}/servers/atlas-exchange/open-metadata/integration-daemon/users/{{user}}/status

###
# @name Refresh connectors in the Catalog Integrator OMIS
# Restarts the requested Integration Service
POST {{baseURL}}/servers/atlas-exchange/open-metadata/integration-daemon/users/{{user}}/integration-services/catalog-integrator/refresh

###
# @name Load open metadata archive file
# Load a file that contains open metadata types and instances.
POST {{baseURL}}/open-metadata/platform-services/users/{{adminUserId}}/server-platform/servers/metadata-store/instance/open-metadata-archives/file
Content-Type: text/plain

content-packs/CocoComboArchive.json

###
# @name Find all glossaries in Egeria
# This call retrieves the details of the Abu Dhabi glossary and checks the adGlossaryGUID is set up properly.
POST {{baseURL}}/servers/metadata-store/open-metadata/access-services/asset-manager/users/{{user}}/glossaries/by-search-string?
    startFrom=0&
    pageSize=0
Content-Type: application/json

{
  "class": "SearchStringRequestBody",
  "searchString": ".*"
}

###
# @name Retrieve ALL the glossary terms for a glossary in Egeria
POST {{baseURL}}/servers/metadata-store/open-metadata/access-services/asset-manager/users/{{user}}/glossaries/{{glossaryGUID}}/terms/retrieve?
    startFrom=0&
    pageSize=0
Content-Type: application/json

{
  "class": "AssetManagerIdentifiersRequestBody",
  "assetManagerGUID": "ba69fd95-c4d6-451f-9411-b9239cd1b9f8"
}

###
# @name Retrieve ALL the glossary categories for a glossary in Egeria
POST {{baseURL}}/servers/metadata-store/open-metadata/access-services/asset-manager/users/{{user}}/glossaries/{{glossaryGUID}}/categories/retrieve?
    startFrom=0&
    pageSize=0
Content-Type: application/json

###
# @name Retrieve a glossary term from Egeria
POST {{baseURL}}/servers/metadata-store/open-metadata/access-services/asset-manager/users/{{user}}/glossaries/terms/{{glossaryTermGUID}}/retrieve
Content-Type: application/json